#!/bin/sh
#
# Check that the code follows a consistant code style
#

# Redirect output to stderr.
exec 1>&2

# Check for existence of astyle, and error out if not present.
if [ ! -x "$(which astyle)" ]; then
	echo ""
	echo "git pre-commit hook:"
	echo "Did not find astyle (Artistic Style), please install it before continuing."
	exit 1
fi

ASTYLE_PARAMETERS="
		--lineend=linux --indent=force-tab=4 --indent-col1-comments 
		--pad-header --pad-oper --unpad-paren 
		--fill-empty-lines --align-pointer=type 
		--align-reference=type --max-code-length=80 --break-after-logical 
		--keep-one-line-blocks --keep-one-line-statements --style=kr"

FILE_PATTERN="\.(c|cc|hpp|cpp|h|java)$"
IGNORE_PATTERN="^src/ignore/"
SUFFIX=".astyle.orig"

echo "--Checking style--"
had_error=0


IFS_bak="$IFS"
IFS_loop='
' #for file names with spaces (spaces are ugly, but we want the script to work)
IFS="$IFS_loop"
for file in `git diff-index --cached --name-only HEAD --diff-filter=ACMR| egrep $FILE_PATTERN| egrep -v $IGNORE_PATTERN` ; do
	IFS="$IFS_bak"
	# nf is the temporary checkout. This makes sure we check against the
	# revision in the index (and not the checked out version).
	nf="`git checkout-index --temp \"${file}\" | cut -f 1`"
	newfile="`mktemp --tmpdir \"${nf}.XXXXXX\"`" || exit 1
	astyle ${ASTYLE_PARAMETERS} < "$nf" > "$newfile" 2>> /dev/null
	diff -u -p "${nf}" "${newfile}" &>/dev/null
	r=$?
	rm "${newfile}"
	rm "${nf}"
	if [ $r != 0 ] ; then
		echo " $file: Code style error. Fixing it now (backup: $file$SUFFIX) "
		astyle ${ASTYLE_PARAMETERS} --quiet --suffix=${SUFFIX} "${file}" &>/dev/null
		had_error=1
	fi
	IFS="$IFS_loop"
done
IFS="$IFS_bak"
if [ $had_error != 0 ]; then
	echo "====================================================================="
	echo " Found code style errors "
	echo " "
	echo " Automatically fixed the files. Please review the files and add them"
	echo " before committing again"
	echo "====================================================================="
	exit 1
fi
echo "--Checking style pass--"
exit 0
